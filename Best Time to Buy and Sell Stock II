class Solution {
public:
    // int solve(int ind, int canBuy, vector<int>& prices){
    //     if(ind==prices.size()) return 0;

    //     int profit = 0;
    //     if(canBuy){
    //         profit = max(-prices[ind] + solve(ind+1, 0, prices), 
    //                     0 + solve(ind+1, 1, prices));
    //     }
    //     else{
    //         profit = max(prices[ind] + solve(ind+1, 1, prices),
    //                     solve(ind+1, 0, prices));
    //     }
    //     return profit;
    // }

    int solve2(int ind, int canBuy, vector<int>& prices, vector<vector<int>> &dp){
        if(ind==prices.size()) return 0;
        
        if(dp[ind][canBuy] != -1) return dp[ind][canBuy];
        int profit = 0;
        if(canBuy){
            profit = max(-prices[ind] + solve2(ind+1, 0, prices, dp), 
                        0 + solve2(ind+1, 1, prices, dp));
        }
        else{
            profit = max(prices[ind] + solve2(ind+1, 1, prices, dp),
                        solve2(ind+1, 0, prices, dp));
        }
        return dp[ind][canBuy] = profit;
    }

    int maxProfit(vector<int>& prices) {
        // return solve(0, 1, prices);

        // memoiation
        // int n = prices.size();
        // vector<vector<int>> dp(n, vector<int>(2, -1));
        // return solve2(0, 1, prices, dp);

        // tabulation
        // int n = prices.size();
        // vector<vector<int>> dp(n+1, vector<int>(2, 0));
        // dp[n][0] = dp[n][1] = 0;
        // for(int ind=n-1; ind>=0; ind--){
        //     for(int canBuy = 0; canBuy<=1; canBuy++){
        //         int profit = 0;
        //         if(canBuy){
        //             profit = max(-prices[ind] + dp[ind+1][0], 
        //                         0 + dp[ind+1][1]);
        //         }
        //         else{
        //             profit = max(prices[ind] + dp[ind+1][1],
        //                         dp[ind+1][0]);
        //         }
        //         dp[ind][canBuy] = profit;
        //     }
        // }
        // return dp[0][1];

        int n = prices.size();
        vector<int> prev(2,0), cur(2,0);
        prev[0] = prev[1] = 0;
        for(int ind=n-1; ind>=0; ind--){
            for(int canBuy = 0; canBuy<=1; canBuy++){
                int profit = 0;
                if(canBuy){
                    profit = max(-prices[ind] + prev[0], 
                                0 + prev[1]);
                }
                else{
                    profit = max(prices[ind] + prev[1],
                                prev[0]);
                }
                cur[canBuy] = profit;
            }
            prev = cur;
        }
        return prev[1];
    }
};
